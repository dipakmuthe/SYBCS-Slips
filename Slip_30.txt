Q1. Write a program that merges two ordered linked lists into third new list. 
When two lists are merged the data in the resulting list are also ordered. The 
two original lists should be left unchanged. That is merged list should be new 
one. Use linked implementation. [10]
==>
  #include<stdio.h>
#include<stdlib.h>
#include"singly.h"   
/* void mergelist(Node *list1,Node *list2,Node *list3)
{
	Node *temp1=list1,*temp2=list2,*temp3=list3;
	Node *newnode;
	while(temp1!=NULL&&temp2!=NULL)
	{
		newnode=(Node*)malloc (sizeof(Node));
		newnode->next=NULL;
		if(temp1->data<temp2->data)
		{
			newnode->data=temp1->data;
			temp1=temp1->next;
		}
		else
		{
			newnode->data=temp2->data;
			temp2=temp2->next;
		}
		if(list3==NULL)
		temp3=list3=newnode;
	    
	    temp3->next=newnode;
	    temp3=newnode;
	}
	while(temp1!=NULL)
	{
		newnode=(Node*)malloc (sizeof(Node));
		newnode->next=NULL;
		newnode->data=temp1->data;
		temp1=temp1->next;
		temp3->next=newnode;
		temp3=newnode;
	}
	while(temp2!=NULL)
	{
		newnode=(Node*)malloc (sizeof(Node));
		newnode->next=NULL;
		newnode->data=temp2->data;
		temp2=temp2->next;
	    temp3->next=newnode;
		temp3=newnode;		
	}
	printf("\nmerged list=");
	display(list3);
}
int main()
{
	Node *list1=NULL,*list2=NULL,*list3=NULL;
	list1=create(list1);
	list2=create(list2);
	printf("\nlink list :");
	display(list1);
	printf("\nlinklist 2:");
	display(list2);
	mergelist(list1,list2,list3);
}*/



 Node *append(Node *list,int num)
 {
         Node *newnode,*temp;
     	newnode=(Node*)malloc (sizeof(Node));	
	newnode->data=num;
	newnode->next=NULL;
	if(list==NULL)
    {
    	return newnode;
	}	
	else
	{
		for(temp=list;temp->next!=NULL;temp=temp->next);
		temp->next=newnode;
		return list;
		
	}
	
}
Node *merge(Node *list1, Node *list2 )
{
	Node *temp1=list1,*temp2=list2,*list3=NULL;
	while (temp1!=NULL&&temp2!=NULL)
	{
		if(temp1->data<temp2->data)
		{
			list3=append(list3,temp1->data);
			temp1=temp2->next;
		}
		else
		{
			list3=append(list3,temp2->data);
			temp2=temp2->next;
		}
	}
	while(temp1!=NULL)
	{ 
	   list3=append(list3,temp1->data);
	   temp1=temp1->next;
	}
	 while(temp2!=NULL)
	 {
	 	 list3=append(list3,temp1->data);
	   temp2=temp2->next;
	 }
	 return list3;
	 
}
int main()
{
	Node *list1=NULL,*list2=NULL,*list3=NULL;
	list1=create(list1);
	list2=create(list2);
	list3=merge(list1,list2);
	display(list3);
}
	




#include<stdio.h>
#include<stdlib.h>
typedef struct node
{
 int data;
 struct node *next;
}NODE;
struct node *create(struct node *list)
{
 int i,n;
 struct node *newnode,*temp;
 printf("Enter limit:");
 scanf("%d",&n);
 for(i=0;i<n;i++)
 {
  newnode=(struct node*)malloc(sizeof(struct node));
  printf("Enter value:");
  scanf("%d",&newnode->data);
  newnode->next=NULL;
  if(list==NULL)
  {
    list=newnode;
    temp=newnode; 
 }
 else
 {
  temp->next=newnode;
  temp=newnode;
 }
 }
 return list;
}
void disp(struct node *list)
{
  struct node *temp;
  for(temp=list;temp!=NULL;temp=temp->next)
  {
    printf("%d\t",temp->data); 
  } 
}
NODE * append(NODE *list,int num)
{
 NODE *newnode,*temp;
 newnode=(NODE*)malloc(sizeof(NODE));
 newnode->data=num;
 newnode->next=NULL;
 if(list==NULL)
 {
  return newnode;
 }
 else
 {
  for(temp=list;temp->next!=NULL;temp=temp->next);
  temp->next=newnode;
  return list;
 }
}
NODE *merge(NODE *list1,NODE *list2)
{
 NODE *temp1=list1,*temp2=list2,*list3=NULL;
 while(temp1!=NULL&&temp2!=NULL)
 {
  if(temp1->data<temp2->data)
  {
   list3=append(list3,temp1->data);
   temp1=temp1->next;
  }
  else
  {
   list3=append(list3,temp2->data);
   temp2=temp2->next;
  }
 }
 while(temp1!=NULL)
 {
  list3=append(list3,temp1->data);
  temp1=temp1->next;
 }
 while(temp2!=NULL)
 {
  list3=append(list3,temp2->data);
  temp2=temp2->next;
 }
 return list3;
}
int main()
{
 NODE *list1=NULL,*list2=NULL,*list3=NULL;
 list1=create(list1);
 list2=create(list2);
 list3=merge(list1,list2);
 disp(list3);
}
	


Q2.Read the data from the file “employee.txt” and sort on names in alphabetical 
order (use strcmp) using bubble sort and selection sort. [20]
==>
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct emp
{
	char ename[20];
	int sal;
	int age;
}e1[100],t;

void bubble(struct emp e1[100],int n)
{
	int pass,i;
	for(pass=1;pass<n;pass++)
	{
		for(i=0;i<n-pass;i++)
		{
			if(strcmp(e1[i].ename,e1[i+1].ename)>0)
			{
				t=e1[i];
				e1[i]=e1[i+1];
				e1[i+1]=t;
			}
		}
	}
	printf("\nbubble sort:");
	for(i=0;i<n;i++)
	printf("%s\n%d\n%d\n",e1[i].ename,e1[i].age,e1[i].sal);

}
void selection(struct emp e1[100],int n)
{
	int i,j,index;
	char min[20];
	for(i=0;i<n;i++)
	{
		strcpy(min,e1[i].ename);
		index=i;
		for(j=i+1;j<n;j++)
		{
			if(strcmp(e1[j].ename,min)<0)
			{
				strcpy(min,e1[j].ename);
			    index=j;
	    	}
    	}
	t=e1[i];
	e1[i]=e1[index];
	e1[index]=t;
   }
    printf("\nselection sort:");
	for(i=0;i<n;i++)
	printf("%s\n%d\n%d\n",e1[i].ename,e1[i].age,e1[i].sal);

}
void insertion(struct emp e1[100],int n)
{ 
    int i,j;
    char key[20];
    for(i=1;i<n;i++)
    {
    	strcpy(key,e1[i].ename);
    	for(j=i-1;j>=0&&strcmp(key,e1[j].ename)<0;j--)
    	{
    		t=e1[j+1];
    		e1[j+1]=e1[j];
    		e1[j]=t;
		}
	}	
         printf("\ninsertion  sort:");
	     for(i=0;i<n;i++)
         printf("%s\n%d\n%d\n",e1[i].ename,e1[i].age,e1[i].sal);
}
  int main()
  {
  	FILE *f1;
  	int i=0,n;
  	f1=fopen("employee.txt","r");
  	if(f1==NULL)
  	{
  		printf("File not found");
  		exit(0);
	}
	while(!feof(f1))
	{
		fscanf(f1,"%s %d%d",&e1[i].ename,&e1[i].age,&e1[i].sal);
		i++;
	}
	 n=i-1;
//	 bubble(e1,n);
	// selection (e1,n);
     insertion(e1,n);
	 fclose(f1);
  }

