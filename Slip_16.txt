Q1. Sort a random array of n integers (accept the value of n from user) in 
ascending order by using recursive Counting sort algorithm. [10]

==> #include<stdio.h>

int main()
{
	int a[100],n,i,r;
	void count(int a[100],int n,int r);
	
	printf("enter limit");
	scanf("%d",&n);
	printf("enter n number");
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	printf("enter range");
	scanf("%d",&r);
	
	count(a,n,r);
}

void count(int a[100],int n,int r)
{
	int c[20]={0},i,b[20];
	for(i=0;i<n;i++)
	{
		
		c[a[i]]=c[a[i]]+1;
	}
	for(i=1;i<=r;i++)
	{
		c[i]=c[i]+c[i-1];
	}
	for(i=n-1;i>=0;i--)
	{
		b[c[a[i]]-1]=a[i];
		c[a[i]]--;
	}
	printf("\nsorted no=");
	for(i=0;i<n;i++)
	printf("%d\t",b[i]);
}

Q2. A postfix expression of the formab+cd-*ab/ is to be evaluated after 
accepting the values of a, b, c and d. The value should be accepted only once 
and the same value is to be used for repeated occurrence of same symbol in the 
expression. Formulate the problem and write a C program to solve the problem 
by using stack [20]

==>
#include<stdio.h>
#include<stdlib.h>
#define MAX 50

struct stack
{
	char data[MAX];
	int top;
}s;

init()
{
	s.top=-1;
}

int isempty()
{
	if(s.top==-1)
	return 1;
	else
	return 0;
}

int isfull()
{
	if(s.top==MAX-1)
	return 1;
	else
	return 0;
}

void push(char c)
{
	if(isfull())
	printf("stack is full don't push");
	else
	{
		s.top++;
		s.data[s.top]=c;
	}
}

char pop()
{
	char val;
	if(isempty())
	printf("stack is empty don't pop");
	else
	{
		val=s.data[s.top];
		s.top--;
		return val;
	}
}

int priority(char x)
{
	if(x=='(')
	return 1;
	if(x=='+'||x=='-')
	return 2;
	if(x=='*'||x=='/')
	return 3;
	if(x=='^'||x=='$')
	return 4;
	return 0;
}

int main()
{
	char s1[100],ch;
	int i;
	init();
	printf("enter string");
	scanf("%s",s1);
	for(i=0;s1[i]!='\0';i++)
	{
		if(isalpha(s1[i]))
		printf("%c",s1[i]);
		else if(s1[i]=='(')
		push(s1[i]);
		else if(s1[i]==')')
		{
			while((ch=pop())!='(')
			printf("%c",ch);
			
		}
		else
		{
			while(priority(s.data[s.top])>=priority(s1[i]))
			{
				printf("%c",pop());
				
			}
			push(s1[i]);
		}
	}
	while(!isempty())
	printf("%c",pop());
		}
	