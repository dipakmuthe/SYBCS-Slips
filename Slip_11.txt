Q1. Read the data from file 'cities.txt' containing names of cities and their STD 
codes. Accept a name of the city from user and use sentinel linear search 
algorithm to check whether the name is present in the file and output the STD 
code, otherwise output “city not in the list”. [10]
==>
  #include<stdio.h>
#include<stdlib.h>
#include<string.h>
int main()
{
	int flag=0,scode;
	char cname[20],s1[20];
	
	FILE *fp1;
	fp1=fopen("city.txt","r");
	if(fp1==NULL)
	{
		printf("file is not found");
		exit(0);
	}
	
	printf("enter city name to search");
	scanf("%s",&s1);
	while(!feof(fp1))
	{
		fscanf(fp1,"%s%d",&cname,&scode);
		
		if(strcmp(cname,s1)==0)
		{
			flag=1;
			break;
		}
	}
	
	if(flag==1)
	printf("city is found std code=%d",scode);
	else
	printf("city is not list");
	fclose(fp1);
}


Q2. Implement a priority queue library (PriorityQ.h) of integers using a static 
implementation of the queue and implementing the below two operations. 
Write a driver program that includes queue library and calls different queue 
operations.
1) Add an element with its priority into the queue.
 2) Delete an element from queue according to its priority. [20]
==>

  
#include <stdio.h>
#include <stdlib.h>
 
#define MAX 5
 
void insert_by_priority(int);
void delete_by_priority(int);
void create();
void check(int);
void display_pqueue();
 
int pri_que[MAX];
int front, rear;
 
int main()
{
    int n, ch;
 
    printf("\n1 - Insert an element into queue");
    printf("\n2 - Delete an element from queue");
    printf("\n3 - Display queue elements");
    printf("\n4 - Exit");
 
    create();
 
    while (1)
    {
        printf("\nEnter your choice : ");    
        scanf("%d", &ch);
 
        switch (ch)
        {
        case 1: 
            printf("\nEnter value to be inserted : ");
            scanf("%d",&n);
            insert_by_priority(n);
            break;
        case 2:
            printf("\nEnter value to delete : ");
            scanf("%d",&n);
            delete_by_priority(n);
            break;
        case 3: 
            display_pqueue();
            break;
        case 4: 
            exit(0);
        default: 
            printf("\nChoice is incorrect, Enter a correct choice");
        }
    }
}
 
/* Function to create an empty priority queue */
void create()
{
    front = rear = -1;
}
 
/* Function to insert value into priority queue */
void insert_by_priority(int data)
{
    if (rear >= MAX - 1)
    {
        printf("\nQueue overflow no more elements can be inserted");
        return;
    }
    if ((front == -1) && (rear == -1))
    {
        front++;
        rear++;
        pri_que[rear] = data;
        return;
    }    
    else
        check(data);
    rear++;
}
 
/* Function to check priority and place element */
void check(int data)
{
    int i,j;
 
    for (i = 0; i <= rear; i++)
    {
        if (data >= pri_que[i])
        {
            for (j = rear + 1; j > i; j--)
            {
                pri_que[j] = pri_que[j - 1];
            }
            pri_que[i] = data;
            return;
        }
    }
    pri_que[i] = data;
}
 
/* Function to delete an element from queue */
void delete_by_priority(int data)
{
    int i;
 
    if ((front==-1) && (rear==-1))
    {
        printf("\nQueue is empty no elements to delete");
        return;
    }
 
    for (i = 0; i <= rear; i++)
    {
        if (data == pri_que[i])
        {
            for (; i < rear; i++)
            {
                pri_que[i] = pri_que[i + 1];
            }
 
        pri_que[i] = -99;
        rear--;
 
        if (rear == -1) 
            front = -1;
        return;
        }
    }
    printf("\n%d not found in queue to delete", data);
}
 
/* Function to display queue elements */
void display_pqueue()
{
    if ((front == -1) && (rear == -1))
    {
        printf("\nQueue is empty");
        return;
    }
 
    for (; front <= rear; front++)
    {
        printf(" %d ", pri_que[front]);
    }
 
    front = 0;
}