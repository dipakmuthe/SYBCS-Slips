Q1. Implement a list library(singlylist.h) for a singly linked list of integer 
 with the operations create, display. Write a menu driven program to call 
 these operations [10]
==> #include<stdlib.h> 
    #include<stdio.h>
 struct node 
 { 
   int data; 
   struct node *next; 
 }; 
 struct node* create(struct node *head) 
 { 
   int n,i; 
   struct node *newnode,*temp; 
   printf("enter limit"); 
   scanf("%d",&n); 
   for(i=0;i<n;i++) 
 { 
   newnode=(struct node*)malloc(sizeof(struct node)); 
   printf("enter value"); 
   scanf("%d",&newnode->data); 
   newnode->next=NULL; 
  if(head==NULL) 
 { 
   head=newnode; 
   temp=newnode; 
 } 
  else 
 { 
   temp->next=newnode; 
  temp=newnode; 
 } 
 } 
 return head; 
 } 
  
  void disp(struct node *head) 
 { 
   struct node *temp; 
   for(temp=head;temp!=NULL;temp=temp->next) 
  { 
    printf("%d\t",temp->data); 
 } 
 } 
  int main() 
 { 
   int ch,pos;
   struct node *head=NULL; 
  
   do{
   	  printf("\n 1-Create \n 2-Display ");
   	  printf("\n Enter the choice:");
   	  scanf("%d",&ch);
       switch(ch)
       {
       	 case 1: head=create(head); 
       	         break;
       	 case 2: disp(head); 
       	 		 break;
       	 default :printf("\n Invalid Choice....");
	   }
   
   }while(ch<3);
 }

Q2. Write a program that copies the contents of one stack into another. Use 
 stack library to perform basic stack operations. The order of two stacks 
 must be identical.(Hint: Use a temporary stack to preserve the order). 
 [20]
==> 


#include<stdio.h>
#include<ctype.h>
#define MAX 50

struct stack
{
	char a[MAX];
	int top;
}s;

void init()
{
	s.top=-1;
}

int isempty()
{
	if(s.top==-1)
	return 1;
	else
	return 0;
}

int isfull()
{
	if(s.top==MAX-1)
	return 1;
	else
	return 0;
}

void push(char x)
{
	if(isfull())
	printf("stack is full don't push");
	else
	{
		s.top++;
		s.a[s.top]=x;
	
	}
}

char pop()
{
	char ch;
	if(isempty())
	printf("stack is empty don't pop");
	else
	{
		ch=s.a[s.top];
		s.top--;
		return ch;
	}
}


int main()
{
	char p[30],q[30];
	int i,k=0;
	init();
	printf("enter string");
	scanf("%s",&p);
	for(i=0;p[i]!='\0';i++)
	push(p[i]);
	
	while(!isempty())
	{
		q[k++]=pop();
	}
	q[k++]='\0';
	
	for(i=0;q[i]!='\0';i++)
	{
		push(q[i]);
	}
	while(!isempty())
	{
		printf("%c",pop());
	}
}