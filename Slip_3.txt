Q1. Sort a random array of n integers (accept the value of n from user) in 
 ascending order by using insertion sort algorithm. [10]
==> #include<stdio.h>
int main()
{
	int a[100],i,n;
	void insertion(int a[100],int n);
	printf("enter limit :");
	scanf("%d",&n);
	printf("enter n number :");
	for(i=0;i<n;i++)
	{
		scanf("%d",&a[i]);
	}
	insertion(a,n);
}

void insertion(int a[100],int n)
{
	int i,j,num,t;
	for(i=0;i<n;i++)
	{
		num=a[i];
		for(j=i-1;j>=0&&num<=a[j];j--)
		{
			t=a[j+1];
			a[j+1]=a[j];
			a[j]=t;
		}
	}
	printf("\n sorted no=");
	for(i=0;i<n;i++)
	printf("%d",a[i]);
}


Q2. Write a C program to evaluate postfix expression. [20]
==>
#include<stdio.h>
#include<stdlib.h>
#include<ctype.h>
#define MAX 50
struct stack
{
	char a[MAX];
	int top;
}s;

void init()
{
	s.top=-1;
}

int isempty()
{
	if(s.top==-1)
	return 1;
	else
	return 0;
	
	}
	
	int isfull()
	{
		if(s.top==MAX-1)
		return 1;
		else
		return 0;
	}
	
	void push(int num)
	{
		if(isfull())
		{
			printf("stack is full don't push");
			
		}
		else
		{
			s.top++;
			s.a[s.top]=num;
		}
		
	}
	int pop()
	{
		int val;
		if(isempty())
		{
			printf("stack is empty don't pop");
		}
		else
		{
			val=s.a[s.top];
			s.top--;
			return val;
		}
	}


int main()
{
	int i,p,q,r,s,val1,val2,result;
	char a[50],ch;
	
	init();
	
	printf("enter postfix expression");
	gets(a);
	
	printf("enter value of \n");
	printf("P\t");
	scanf("%d",&p);
	printf("Q\t");
	scanf("%d",&q);
	printf("R\t");
	scanf("%d",&r);
	printf("S\t");
	scanf("%d",&s);
	
	for(i=0;a[i]!='\0';i++)
	{
		if(isalpha(a[i]))
		{
			switch(a[i])
			{
				case 'P':push(p);
				       break;
				case 'Q':push(q);
				       break;
				case 'R':push(r);
				       break;
				case 'S':push(s);
				       break;	   	          
				       
			}
		}
		else
		{
			val1=pop();
			val2=pop();
			switch(a[i])
			{
				case '+':result=val2+val1;
				         break;
				case '-':result=val2-val1;
				         break;
				case '*':result=val2*val1;
				         break;
				case '/':result=val2/val1;
				         break;		 		          
			}
			push(result);
		}
	}
	printf("result=%d",pop());
}
