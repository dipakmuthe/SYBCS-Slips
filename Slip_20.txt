Q1. Implement a stack library (ststack.h) of integers using a static 
implementation of the stack and implementing the operations like init(S), 
S=push(S), isFull(S). Write a driver program that includes stack library and 
calls different stack operations. [10]

==>
     Header File 
-----------------------------------------------------
   #define MAX 5
struct stack
{
    int a[MAX];
    int top;
}s1;
void init()
{
    s1.top=-1;
}
int isempty()
{
    if(s1.top==-1)
     return 1;
    else
    return 0;
}
 int isfull()
 {
    if(s1.top==MAX-1)
    return 1;
    else 
    return 0;
 }
 void push(int num)
 {
    if(isfull())
    printf("\n Stack is full dont PUSH..");
    else 
    {
        s1.top++;
        s1.a[s1.top]=num;
        printf("\n PUSH Successful..........");
    }
 }
   void pop()
    {
       int val;
       if(isempty())
       {
        printf("\n Stack is empty dont pop");
       }
       else
       {
        val=s1.a[s1.top];
        s1.top--;
        printf("\n Poped value=%d",val);
        printf("\n no=%d",val);
       }
    }
    void disp()
    {
        int i;
        for(i=s1.top;i>=0;i--)
        {
            printf("%d\n",s1.a[i]);
        }
    }
---------------------------Program---------------------------------
   #include<stdio.h>
#include"stack.h"
  int main()
  {
    int ch,num;
    init();
    do{
        printf("\n 1-Push\n 2-POP\n 3-Display");
        printf("\nEnter the Choice:");
        scanf("%d",&ch);

        switch (ch)
        {
            
        case 1:printf("\nEnter Number:");
               scanf("%d",&num);
               push(num);
               break;
        
        case 2:pop();
               break;

        case 3:disp();
               break;

        default:printf("\n Inavalid Choice........");
            break;
        }
    }while (ch<4);
  }

Q2. There are lists where new elements are always appended at the end of the 
list. The list can be implemented as a circular list with the external pointer 
pointing to the last element of the list. Implement singly linked circular list of 
integers with append and display operations. The operation append(L, n), 
appends to the end of the list, n integers either accepted from user or randomly 
generated. [20]

==>
#include <stdio.h>
#include <stdlib.h>
typedef struct node
{
    int data;
    struct node *next;
} node;
#define nodealloc (node *)malloc(sizeof(node *));
node *create(node *list)
{
    node *temp, *newnode;
    int i, n;
    printf("enter limit");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        newnode = nodealloc;
        printf("enter vallue");
        scanf("%d", &newnode->data);
        if (list == NULL)
        {
            list = temp = newnode;
            list->next = list;
        }
        else
        {
            temp->next = newnode;
            temp = newnode;
            newnode->next = list;
        }
    }
    return list;
}
void disp(node *list)
{
    node *temp;
    temp = list;
    do
    {
        printf("%d\t", temp->data);
        temp = temp->next;
    } while (temp != list);
}
node *append(node *list, int num)
{
    node *newnode, *temp;
    newnode = nodealloc;
    newnode->data = num;
    temp = list;
    for (temp = list; temp->next != list; temp = temp->next)
        ;
    temp->next = newnode;
    newnode->next = list;
    return list;
}
int main()
{
    node *list = NULL;
    int num, ch;
    do
    {
        printf("enter choice\n1-create\n2-disp\n3-append=\t");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            list = create(list);
            break;
        case 2:
            disp(list);
            break;
        case 3:
            printf("enter num");
            scanf("%d", &num);
            list = append(list, num);
            break;
        }
    } while (ch < 4);
}
